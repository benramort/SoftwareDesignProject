plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'es.deusto.ingenieria.sd.translation.client.TranslationSocketClient'
}

/*Fragment generated by Claude Sonet
Define arguments to pass to the Main class - two means: flexible from command shell OR by default

Command in case of overriding the ip & port arg ->
./gradlew run -Parg1=206.10.20.0 -Parg2=7500
*/

run {
		
    def arg1 = '127.0.0.1' // default value for arg1
    def arg2 = '9500'      // default value for arg2

    if (project.hasProperty('arg1')) {
        arg1 = project.property('arg1')
    }

    if (project.hasProperty('arg2')) {
        arg2 = project.property('arg2')
    }

    args arg1, arg2

    standardInput = System.in
    // Forcing the encoding 
    systemProperty "file.encoding", "UTF-8"
	standardOutput = new PrintStream(System.out, true, "UTF-8")

}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/org.json/json
	implementation 'org.json:json:20240303'


    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // This dependency is used by the application.
    implementation libs.guava
}



tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
